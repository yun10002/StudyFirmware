
TIMER_COUNTER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000180  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800112  00800112  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000897  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ae  00000000  00000000  00000b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  0000130d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000404  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	9b c0       	rjmp	.+310    	; 0x14c <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 31       	cpi	r26, 0x15	; 21
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	5b c0       	rjmp	.+182    	; 0x17c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
volatile unsigned char Time_STOP = 0; //숫자 증가 및 정지 시키는 변수

unsigned char timer0Cnt = 0;

int main(){
	DDRE = 0x00; //입력
  c8:	12 b8       	out	0x02, r1	; 2
	DDRA = 0xff; //출력
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	8a bb       	out	0x1a, r24	; 26
	
	TCCR2 = 0x05; //프리스케일러 1024
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	85 bd       	out	0x25, r24	; 37
	OCR2 = 144; //0.01초마다 한 번씩 인터럽트 발생
  d2:	80 e9       	ldi	r24, 0x90	; 144
  d4:	83 bd       	out	0x23, r24	; 35
	TIMSK |= 1 << OCF2;
  d6:	87 b7       	in	r24, 0x37	; 55
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	87 bf       	out	0x37, r24	; 55
	
	EICRB = 0x03; //INT4를 상승엣지에서 동작하도록 설정
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0x10; //INT4 허용
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	89 bf       	out	0x39, r24	; 57
	EIFR = 0x10; //INT4 플래그 클리어
  e4:	88 bf       	out	0x38, r24	; 56
	
	sei();
  e6:	78 94       	sei
	
	while(1){
		PORTA = FND_DATA_TBL[time_s]; //포트A에 FND 연결 및 tbl값 출력
  e8:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <time_s>
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	e0 50       	subi	r30, 0x00	; 0
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	80 81       	ld	r24, Z
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	f8 cf       	rjmp	.-16     	; 0xe8 <main+0x20>

000000f8 <__vector_9>:
	}
	
	return 0;
}

SIGNAL(TIMER2_COMP_vect){
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
	cli(); //전체 인터럽트 금지
 104:	f8 94       	cli
	OCR2 += 72; //0.01초 후에 인터럽트 발생
 106:	83 b5       	in	r24, 0x23	; 35
 108:	88 5b       	subi	r24, 0xB8	; 184
 10a:	83 bd       	out	0x23, r24	; 35
	timer0Cnt++;
 10c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
	if(timer0Cnt == 50){ //0.01s * 50 = 0.5s -> 0.5초를 얻기 위한 카운트 횟수
 116:	82 33       	cpi	r24, 0x32	; 50
 118:	91 f4       	brne	.+36     	; 0x13e <__vector_9+0x46>
		if(Time_STOP == 0){
 11a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Time_STOP>
 11e:	81 11       	cpse	r24, r1
 120:	0c c0       	rjmp	.+24     	; 0x13a <__vector_9+0x42>
			if(time_s >= 16) time_s = 0; //16되면 0으로 초기화
 122:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <time_s>
 126:	80 31       	cpi	r24, 0x10	; 16
 128:	18 f0       	brcs	.+6      	; 0x130 <__vector_9+0x38>
 12a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <time_s>
 12e:	05 c0       	rjmp	.+10     	; 0x13a <__vector_9+0x42>
			else time_s++; //time_s 변수는 16까지만 증가
 130:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <time_s>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <time_s>
		}
	timer0Cnt = 0;
 13a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
	}
	sei();
 13e:	78 94       	sei
}
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_5>:

SIGNAL(INT4_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
	cli(); //전체인터럽트 금지
 158:	f8 94       	cli
	
	if(Time_STOP == 0) 
 15a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Time_STOP>
 15e:	81 11       	cpse	r24, r1
 160:	04 c0       	rjmp	.+8      	; 0x16a <__vector_5+0x1e>
		Time_STOP = 1; //Time_STOP이 0인 경우에만 1 입력
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Time_STOP>
 168:	02 c0       	rjmp	.+4      	; 0x16e <__vector_5+0x22>
	else Time_STOP = 0; //반대
 16a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <Time_STOP>
	
	sei(); //전체 인터럽트 허용
 16e:	78 94       	sei
 170:	8f 91       	pop	r24
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
